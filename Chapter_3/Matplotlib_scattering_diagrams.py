from matplotlib import pyplot as plt

# ----------------------
#      Matplotlib      |
#  Диаграммы рассеяния |
# ----------------------

# Диаграммы рассеяния лучше всего подходит для визуализации связи между
# двумя спаренными множествами данных. Например, на рис показана связь
# между числом друзей пользователя и числом минут, которые они проводят
# на веб-сайте каждые день:

friends = [70, 65, 72, 63, 71, 64, 60, 64, 67]            # Друзья
minutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]   # Минуты
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']    # Метки

plt.scatter(friends, minutes)

# Назначить метку для каждой точки
for label, friend_count, minute_count in zip(labels, friends, minutes):
    plt.annotate(label,
                 xy=(friend_count, minute_count), # Задать метку
                 xytext=(5, -5),                  # и немного сместить ее
                 textcoords='offset points')

plt.title("Число минут против числа друзей")
plt.xlabel("Число друзей")
plt.ylabel("Число минут, проводимых на сайте ежедневно")
plt.show()

# При размещении на диаграмме рассеяния сопоставимых величин можно получить
# искаженную картину, если масштаб по осям будет определятся библиотекой
# matplotlib автоматически:
test_1_grades = [99, 90, 85, 97, 80]     # Оценки за экзамен 1
test_2_grades = [100, 85, 60, 90, 70]    # Оценки за экзамен 2

plt.scatter(test_1_grades, test_2_grades)
plt.title("Оси не сопоставимы")
plt.xlabel("Оценки за экзамен 1")
plt.ylabel("Оценить за экзамен 2")
plt.show()

# Но если добавить вызов метода plt.axis("equal"), то диаграмма точнее
# покажет, что большая часть вариации оценок приходится на экзамен 2.

plt.scatter(test_1_grades, test_2_grades)
plt.title("Оси сопоставимы")
plt.xlabel("Оценки за экзамен 1")
plt.ylabel("Оценить за экзамен 2")
plt.axis("equal")
plt.show()

# Этого будет достаточно для того, чтобы приступить к визуализации своих
# данных. Гораздо больше о визуализации мы узнаем в остальной части
# книги.