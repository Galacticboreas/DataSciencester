# --------------------------------
# Центральная предельная теорема |
# --------------------------------

import math
import random

from matplotlib import pyplot as plt


# Одна из причин распространенности нормального распределения
# заключяется в центральной предельной теореме (ЦПТ), согласно
# которой (по существу) случайная величина, определенная как среднее
# большого числа взаимно независимых и идентично распределенных
# случайных величин, сама является приближенно нормально распределенной.

# Это можно легко продемонстрировать, обратившись к биноминальным
# случайным величинам, имеющим два параметра - n и p. Биномиальная
# случайная величина binomial(n, p) - это просто сумма n независимых
# случайных величин с распределением Бернулли bernoulli(p), таких,
# что значение каждой из них равно 1 с вероятностью p
# и 0 с вероятностью 1 - р:

def bernoulli_trial(p: float) -> int:
    """Возвращает 1 с вероятностью р и 0 с вероятностью 1 - р"""
    return 1 if random.random() < p else 0

def binomial(n: int, p: float) -> int:
    """Возвращает сумму из n испытаний bernoulli(p)"""
    return sum(bernoulli_trial(p) for _ in range(n))

def normal_cdf(x: float, mu: float = 0, sigma: float = 1) -> float:
    return (1 + math.erf((x - mu) / math.sqrt(2) / sigma)) / 2

from collections import Counter

def binomial_histogram(p: float, n: int, num_points: int) -> None:
    """Подбирает точки из binomial(n, p) и строит их гистограмму"""
    data = [binomial(n, p) for _ in range(num_points)]

    # Использовать столбчатый график
    # для показа фактических биномиальных выборок

    histogram = Counter(data)
    plt.bar([x - 0.4 for x in histogram.keys()],
            [v / num_points for v in histogram.values()],
            0.8,
            color='0.75')

    mu = p * n
    sigma = math.sqrt(n * p * (1 - p))

    # Использовать линейный график для показа нормальной аппроксимации
    xs = range(min(data), max(data) + 1)
    ys = [normal_cdf(i + 0.5, mu, sigma) - normal_cdf(i - 0.5, mu, sigma)
          for i in xs]

    plt.plot(xs, ys)
    plt.title("Биномиальное распределение и его нормальное приближение")
    plt.show()


binomial_histogram(0.75, 100, 10000)   # Мораль этого приближения
# заключается в том, что если (скажем) нужно узнать вероятность,
# что уравновешенная монета выпадает орлом более 60 раз из 100
# бросков, то это можно вычислить как вероятность, что normal(50, 5)
# больше 60, и это гораздо легче сделать, чем вычислить кумулятивную
# функцию биномиального распределения binomial(100, 0.5). (Хотя в 
# большинстве приложений вы, возможно, воспользуетесь статистическим
# програмным обеспечением, которое с готовностью вычислит любую
# вероятность, какую вы пожелаете.)
