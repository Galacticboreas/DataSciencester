# Центральные тенденции

# Обычно мы хотим имень некое представление о том, где наши данные
# центрированы. Чаще всего для этих целей используется среднее (или
# среднее арифметическое) значение, которое берется как сумма данных,
# деленная на их количество:

# Среднее значение
import imp
from itertools import count
from time import process_time
from typing import Counter, List

num_friends = [100.0,49,41,40,25,21,21,19,19,18,18,16,15,15,15,15,14,14,13,13,13,13,12,12,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
def mean(xs: List[float]) -> float:
    return sum(xs) / len(xs)

mean(num_friends)    # 7.333333

# Мы напишем разные функции для четного и нечетного случаев и объединим их:

# Символы подчеркивания указывают на то, что эти функции являются
# "приватными", т.к. они предназначены для вызова из нашей функции median,
# а не другими людьми, использующими нашу статистическую библиотеку
def _median_odd(xs: List[float]) -> float:
    """Если len(xs) является нечетной,
       то медиана - это средний элемент"""
    return sorted(xs)[len(xs) // 2]

def _median_even(xs: List[float]) -> float:
    """Если len(xs) является четной, то она является средним значением
       двух срединных элементов"""
    sorted_xs = sorted(xs)
    hi_midpoint = len(xs) // 2   # напр. длина 4 => hi_midpoint 2
    return (sorted_xs[hi_midpoint - 1] + sorted_xs[hi_midpoint]) / 2

def median(v: List[float]) -> float:
    """Отыскивает 'ближайшее к середине' значение v"""
    return _median_even(v) if len(v) % 2 == 0 else _median_odd(v)

assert median([1, 10, 2, 9, 5]) == 5
assert median([1, 9, 2, 10]) == (2 + 9) / 2

# И теперь мы можем вычислить медианное число друзей:
print(median(num_friends))     # 6

# Вместе с тем среднее значение очень чувствительно к выбросам в данных.
# Если бы самый дружелюбный пользователь имел 200 друзей (вместо 100), то 
# среднее увеличилось бы до 7.82, а медиана осталась бы на прежнем уровне.
# Так как выбросы являются, скорее всего, плохими данными (или иначе - 
# нерепрезентативными для ситуации, которую мы пытаемся понять), то среднее
# может иногда давать искаженную картику. В качестве примера часто приводят
# историю, как в середине 1980-х годов в Университете Северной Каролины
# география стала специализацией с самой высокой стартовой среднестатистической
# зарплатой, что произошло в основном из-за звезды НБА 
# (и выброса) Майкла Джордана.

# Обобщение медианы является квантиль, который представляет значение, ниже
# которого располагается определенный процентиль данных (медиана представляет
# значение, ниже которого расположены 50% данных.)
def quantile(xs: List[float], p: float) -> float:
    """Возвращает значение р-го процентиля в х"""
    p_index = int(p * len(xs))     # Преобразует % в индекс списка
    return sorted(xs)[p_index]

assert quantile(num_friends, 0.10) == 1
assert quantile(num_friends, 0.25) == 3     # Нижний квантиль
assert quantile(num_friends, 0.75) == 9     # Верхний квантиль
assert quantile(num_friends, 0.90) == 13

# Реже вам может понадобиться мода - значение или значения, которые встречаются
# наиболее часто:
def mode(xs: List[float]) -> List[float]:
    """Возвращает список, т.к. может быть более одной моды"""
    counts = Counter(xs)
    max_count = max(counts.values())
    return [xs_i for xs_i, count in counts.items()
            if count == max_count]

assert set(mode(num_friends)) == {1, 6}
# Но чаще всего мы будем просто использовать среднее значение

# Вариация

# Вариация служит мерой разброса наших данных. Как правило, это
# статистические показатели, у которых значения, близкие к нулю,
# означают полное отсутствие разброса, а большие значения (что бы
# это ни значило) - очень большой разброс.
# Например, самым простым показателем явлеяется размах, который
# определяется как разница между максимальным и минимальным значениями
# данных:

# Ключевое слово "range" (размах) в Python уже имеет
# свой смысл, поэтому берем другое
def data_range(xs: List[float]) -> float:
    return max(xs) - min(xs)

assert data_range(num_friends) == 99


# Как и медиана, размах не особо зависит от всего набора данных.
# Набор данных, все точки которого равны 0 или 100, имеет тот же размах,
# что и набор данных, чьи значения представленны числами 0, 100 и 
# большого количества чисел 50, хотя кажется, что первый набор "должен"
# быть разбросан больше.

# Более точным показателем вариации является дисперсия, вычисляемая как:

def sum_of_squares(xs: List[float]) -> float:
    return sum(x ** 2 for x in xs)

def de_mean(xs: List[float]) -> List[float]:
    """Транслировать xs путем вычитания его среднего
        (результат имеет нулевое среднее)"""
    x_bar = mean(xs)
    return [x - x_bar for x in xs]

def variance(xs: List[float]) -> float:
    """Почти среднеквадратическое отклонение от среднего"""
    assert len(xs) >= 2, "дисперсия требует наличия не менее двух элементов"

    n = len(xs)
    deviations = de_mean(xs)
    return sum_of_squares(deviations) / (n - 1)

assert 81.54 < variance(num_friends) < 81.55

import math

def standard_deviation(xs: List[float]) -> float:
    """Стандартное отклонение - это корень квадратный из дисперсии"""
    return math.sqrt(variance(xs))

assert 9.02 < standard_deviation(num_friends) < 9.043

