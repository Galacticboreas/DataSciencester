# ------------------
#    Статистика    |
# ------------------

# Используя простые методы из главы 1, вы легко можете предъявить
# запрашиваемые данные. Однако сейчас вы столкнулись с задачей 
# выполнения их описательного анализа.
# Любой набор данных очевидным образом характеризует сам себя:

# Число друзей
num_friends = [100, 49, 41, 40, 25,
               # ... и еще много других
               ]
# Для достаточно малого набора данных такое описание может даже
# оказаться наилучшим. Но для более крупного набора данных это
# будет выглядеть очень громоздко и, скорее всего, непрозрачно.
# (Представьте, что у вас перед глазами список из 1 млн чисел.)
# По этой причине пользуются статистикой, с помощью которой
# выжимают и коммуницируют информацию о существенных признаках,
# присутствующих в данных.
# В качестве первоначального подхода вы помещаете число друзей
# на гистограмму, используя словарь Counter и метод plt.bar (рис):
from collections import Counter
import matplotlib.pyplot as plt

num_friends = [100.0,49,41,40,25,21,21,19,19,18,18,16,15,15,15,15,14,14,13,13,13,13,12,12,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
friend_counts = Counter(num_friends)
xs = range(101)                          # Максимум равен 100
ys = [friend_counts[x] for x in xs]      # Высота - это число друзей

plt.bar(xs, ys)
plt.axis([0, 101, 0, 25])
plt.title("Гистограмма количества друзей")
plt.xlabel("Число друзей")
plt.ylabel("Число людей")
plt.show()

# К сожалению, эту диаграмму крайне сложно упомянуть в разговоре, поэтому
# вы приступаете к генерированию некоторой статистики. Наверное, самым
# простым статистическим показателем является число точек данных:
num_points = len(num_friends)     # Число точек равно 204

# Кроме этого, могут быть интересны наибольшие и наименьшие значения:
largest_value = max(num_friends)     # Наибольшее значение равно 100
smallest_value = min(num_friends)    # Наименьшее значение равно 1

# которые являются особыми случаями, когда нужно узнать значения в 
# определенных позициях:
sorted_values = sorted(num_friends)       # Отсортированные значения
smallest_value = sorted_values[0]         # Минимум равен 1
second_smallest_value = sorted_values[1]  # Слудующий минимум равен 1
second_largest_value = sorted_values[-2]  # Следующий максимум равен 49

# Но это только начало
