from typing import Tuple
import math

# Пример: бросание монеты

# Представим, что у нас есть монета, которую требуется проверить, уравновешена
# ли она. Для этого делается допущение, что монета имеет некую вероятность р
# выпадения орла, и выдвигается нулеваня гипотеза о том, что монета уравнове-
# шена, т.е. р = 0.5. Проверим ее, сопоставив с альтернативной гипотезой р != 0.5

# В частности, наша проверка будет предусматривать бросание монеты n раз с
# подсчетом количества орлов Х. Каждый бросок монеты - это бурнуллиево испытание,
# где Х - это биномиальная случайная величина binomial(n, p), которую, как мы
# уже убедились в главе 6, можно аппроксимировать с помощью нормального распре-
# деления:

# Аппроксимация биномиальной случайной величины нормальным распределением
def normal_approximation_to_binomial(n: int, p: float) -> Tuple[float, float]:
    """Возвращает mu и sigma, соответствующие binomial(n, p)"""
    mu = p * n
    sigma = math.sqrt(p * (1 - p) * n)
    return mu, sigma


# Всякий раз, когда случайная величина подчиняется нормальному распределению,
# мы можем использовать функцию normal_cdf для выявления вероятности, что ее
# реализованное значение лежит в пределах или за пределами определенного
# интервала:

def normal_cdf(x: float, mu: float = 0, sigma: float = 1) -> float:
    return (1 + math.erf((x - mu) / math.sqrt(2) / sigma)) / 2
# Нормальная функция CDF (normal_cdf) - это вероятность, что переменная
# лежит ниже порога
normal_probability_below = normal_cdf

# Она лежит выше порога, если она не ниже порога
def normal_probability_above(lo: float,
                             mu: float = 0,
                             sigma: float = 1) -> float:
    """Вероятность, что N(mu, sigma) выше, чем lo."""
    return 1 - normal_cdf(lo, mu, sigma)

# Она лежит между, если она меньше, чем hi, но не менее, чем lo
def normal_probability_between(lo: float,
                               hi: float,
                               mu: float = 0,
                               sigma: float = 1) -> float:
    """Веротность, что N(mu, sigma) между lo и hi."""
    return normal_cdf(hi, mu, sigma) - normal_cdf(lo, mu, sigma)

# Она лежит за пределами, если она лежит между
def normal_probability_outside(lo: float,
                               hi: float,
                               mu: float = 0,
                               sigma: float = 1) -> float:
    """Вероятность, что N(mu, sigma) не лежит между lo и hi."""
    return 1 - normal_probability_between(lo, hi, mu, sigma)

# Мы также можем сделать обратное - отыскать нехвостовой участок или
# же (симметричный) интервал вокруг среднего значения, на который

