from typing import Tuple
import math

# Пример: бросание монеты

# Представим, что у нас есть монета, которую требуется проверить, уравновешена
# ли она. Для этого делается допущение, что монета имеет некую вероятность р
# выпадения орла, и выдвигается нулеваня гипотеза о том, что монета уравнове-
# шена, т.е. р = 0.5. Проверим ее, сопоставив с альтернативной гипотезой р != 0.5

# В частности, наша проверка будет предусматривать бросание монеты n раз с
# подсчетом количества орлов Х. Каждый бросок монеты - это бурнуллиево испытание,
# где Х - это биномиальная случайная величина binomial(n, p), которую, как мы
# уже убедились в главе 6, можно аппроксимировать с помощью нормального распре-
# деления:

# Аппроксимация биномиальной случайной величины нормальным распределением
def normal_approximation_to_binomial(n: int, p: float) -> Tuple[float, float]:
    """Возвращает mu и sigma, соответствующие binomial(n, p)"""
    mu = p * n
    sigma = math.sqrt(p * (1 - p) * n)
    return mu, sigma


# Всякий раз, когда случайная величина подчиняется нормальному распределению,
# мы можем использовать функцию normal_cdf для выявления вероятности, что ее
# реализованное значение лежит в пределах или за пределами определенного
# интервала:

def normal_cdf(x: float, mu: float = 0, sigma: float = 1) -> float:
    return (1 + math.erf((x - mu) / math.sqrt(2) / sigma)) / 2
# Нормальная функция CDF (normal_cdf) - это вероятность, что переменная
# лежит ниже порога
normal_probability_below = normal_cdf

# Она лежит выше порога, если она не ниже порога
def normal_probability_above(lo: float,
                             mu: float = 0,
                             sigma: float = 1) -> float:
    """Вероятность, что N(mu, sigma) выше, чем lo."""
    return 1 - normal_cdf(lo, mu, sigma)

# Она лежит между, если она меньше, чем hi, но не менее, чем lo
def normal_probability_between(lo: float,
                               hi: float,
                               mu: float = 0,
                               sigma: float = 1) -> float:
    """Веротность, что N(mu, sigma) между lo и hi."""
    return normal_cdf(hi, mu, sigma) - normal_cdf(lo, mu, sigma)

# Она лежит за пределами, если она лежит между
def normal_probability_outside(lo: float,
                               hi: float,
                               mu: float = 0,
                               sigma: float = 1) -> float:
    """Вероятность, что N(mu, sigma) не лежит между lo и hi."""
    return 1 - normal_probability_between(lo, hi, mu, sigma)

# Мы также можем сделать обратное - отыскать нехвостовой участок или
# же (симметричный) интервал вокруг среднего значения, на который при-
# ходится определенный уровень правдоподобия. Например, если нам нужно
# отыскать интервал с центром в среднем значении, содержащий 60%-ную
# вероятность, то мы отыскиваем точки отсечения, где верхний и нижний
# "хвосты" содержат по 20 % вероятности каждый (с остатком в 60%):

def inverse_normal_cdf(p: float,
                       mu: float = 0,
                       sigma: float = 1,
                       tolerance: float = 0.00001) -> float:
    """Находит приблизительное обратное с помощью двоичного поиска"""

    # if not standard, compute standard and rescale
    if mu != 0 or sigma != 1:
        return mu + sigma * inverse_normal_cdf(p, tolerance=tolerance)

    low_z = -10.0                      # normal_cdf(-10) is (very close to) 0
    hi_z  =  10.0                      # normal_cdf(10)  is (very close to) 1
    while hi_z - low_z > tolerance:
        mid_z = (low_z + hi_z) / 2     # Consider the midpoint
        mid_p = normal_cdf(mid_z)      # and the cdf's value there
        if mid_p < p:
            low_z = mid_z              # Midpoint too low, search above it
        else:
            hi_z = mid_z               # Midpoint too high, search below it

    return mid_z

# Верхняя граница
def normal_upper_bound(probability: float,
                       mu: float = 0,
                       sigma: float = 1) -> float:
    """Возвращает z, для которой P(Z <= z) = вероятность"""
    return inverse_normal_cdf(probability, mu, sigma)

# Нижняя граница
def normal_lower_bound(probability: float,
                       mu: float = 0,
                       sigma: float = 1) -> float:
    """Возвращает z, для которой P(Z >= z) = вероятность"""
    return inverse_normal_cdf(1 - probability, mu, sigma)

# Двусторонняя граница
def normal_two_sided_bounds(probability: float,
                            mu: float = 0,
                            sigma: float = 1) -> Tuple[float, float]:
    """Возвращает симметрические (вокруг среднего) границы,
       которые содержат указанную вероятность
    """
    tail_probability = (1 - probability) / 2

    # Верхняя граница должна иметь хвостовую tail_probability выше ее
    upper_bound = normal_lower_bound(tail_probability, mu, sigma)

    # Нижняя граница должна иметь хвостовую tail_probability ниже ее
    lower_bound = normal_upper_bound(tail_probability, mu, sigma)
    return lower_bound, upper_bound

# В частности, будем считать, что мы решили сделать n=1000 бросков.
# Если гипотетически об уравновешенности монеты является истинной,
# то Х должна быть приближенно нормально распределена со средним значением,
# равным 500, и стандартным отклонением 15.8:

mu_0, sigma_0 = normal_approximation_to_binomial(1000, 0.5) 
                                                # mu_0 = 500.0 
                                                # sigma_0 = 15.811388300841896

# Нам нужно принять решение о значимости, т.е. насколько мы готовы совершить
# ошибку 1-го рода ("ложное утверждение"), при которой мы отклоняем Н0, даже
# если она является истинной. По причинам, затерявшимся в аналах истории,
# эта готовность часто задается на уровне 5% или 1%. Возьмем за основу 5%.

# Рассмотрим проверку, которая отклоняет Н0, если Х попадает за пределы
# границ, заданных следующим образом:

# (469, 531)
lower_bound, upper_bound = normal_two_sided_bounds(0.95, mu_0, sigma_0) 
                                                # lower_bound = 469.01026640487555 
                                                # upper_bound = 530.9897335951244

# Допустив, что р действительно равно 0.5 (т.е. Н0 является истинной),
# существует всего 5%-ный шанс, что мы наблюдаем случайную величину Х, которая
# лежит за пределами этого интервала, и это в точности соотвествует тому уровню
# значимости, который мы хотели. Выражаясь иначе, если Н0 является истинной, то
# приближенно в 19 случаев из 20 такая проверка будет давать правильный результат.

# Нередко мы также заинтересованны в мощности проверки, т.е. вероятности не
# совершить ошибку 2-го рода ("ложное отрицание"), когда нам не удается отклонить
# Н0, даже если она является ложной. Для того чтобы это измерить, следует
# конкретизировать, что в точности означает ложность гипотезы Н0. (Знание
# о том, что р != 0.5, не дает нам массы информации о распределении Х.)
# В частности, давайте проверим, что произойдет, если на самом деле р = 0.55,
# вследствие чего монета слегка смещена в сторону орлов.

# В этом случае мощность проверки можно вычислить так:

# 95%-ные границы, основанные на допущении, что р рано 0.5
lo, hi = normal_two_sided_bounds(0.95, mu_0, sigma_0)
                                                # lo = 469.01026640487555 
                                                # hi = 530.9897335951244

# Фактические mu и sigma, основанные на р, равном 0.55
mu_1, sigma_1 = normal_approximation_to_binomial(1000, 0.55)
                                                # mu_1 = 550.0 
                                                # sigma_1 = 15.732132722552274

# Ошибка 2-го рода означает, что нам не удалось отклонить нулевую
# гипотезу, что произойдет, когда Х все еще внутри нашего исходного
# интервала
type_2_probability = normal_probability_between(lo, hi, mu_1, sigma_1)
                                                # 0.11345199870463285
power = 1 - type_2_probability   # 0.8865480012953671

# Вместо этого допустим, что наша нулевая гипотеза состояла в том, что 
# монета не смещена в сторону орлов, или что р <= 0.5. В этом случае 
# нам нужна односторонняя проверка, которая отклоняет нелувую гипотезу,
# когда Х больше 500, и не отклоняет, когда Х меньше 500. Поэтому
# проверка на 5%-ном уровне значимости предусматривает применение функции
# normal_probability_below для отыскания точки отсечения, ниже которой
# лежит 95% вероятности:

hi = normal_upper_bound(0.95, mu_0, sigma_0)   # 526.0073585242053
# равно 526 (< 531, т.к. нам нужно больше вероятности в верхнем хвосте)

type_2_probability = normal_probability_below(hi, mu_1, sigma_1)
                                               # 0.06362051966928267
power = 1 - type_2_probability   # 0.9363794803307173

# Эта проверка мощнее, поскольку она больше не отклоняет Н0, когда Х
# ниже 469 (что вряд ли вообще произойдет, если альтернативная гипотеза
# Н1, является истинной), и вместо этого отклоняет нулевую гипотезу Н0,
# когда Х лежит между 526 и 531 (что вполне может произойти, если
# альтернативная гипотеза Н1 является истинной).
