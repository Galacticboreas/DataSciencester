# ---------------------------------
# Функциональное программирование |
# ---------------------------------

# Функция zip и распаковка аргументов

list1 = ['a', 'b', 'c']
list2 = [1, 2, 3]

# функция zip является ленивой
# поэтому следует сделать что-то вроде этого

pairs = [pair for pair in zip(list1, list2)] # равно [('a', 1), ('b', 2), ('c', 3)]

# Если списки имеют разные длины, то функция прекратит работу, как
# только закончится первый из них. "Разъединить" список можно при
# помощи замысловатого трюка:

letters, numbers = zip(*pairs)

# Звездочка * выполняет распаковку аргументов, которая использует элементы
# пар в качестве индивидуальных аргументов для функции zip. Это то же самое,
# как и вызывать:

letters, numbers = zip(('a', 1), ('b', 2), ('c', 3))

# Результат в обоих случаях будет [('a', 'b', 'c'), (1, 2, 3)]

# Распаковка аргументов может применятся с любой функцией:

def add(a, b): return a + b

add(1, 2)     # Возвращает 3
try:
    add([1, 2])
except TypeError:
    print("Функция add ожидает два входа")
result_sum = add(*[1, 2])     # Возвращает 3

# Этот прием редко окажется для нас полезным, но когда мы его будем 
# применять, то он будет выступать в качестве програмистского трюка.
