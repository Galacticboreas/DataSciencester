# ------------------
# Линейная алгебра |
#     Векторы      |
# ------------------

# Линейная алгебра - это раздел математики, который занимается
# векторными проистранствами.

# Векторы
# В абстрактном смысле векторы - это объекты, которые можно
# складывать между собой, формируя новые векторы, и умножать
# на скалярные величины (т.е. на числа), опять же формируя
# новые векторы.

# Конкретно в нашем случае векторы - это точки в некотором
# конечноразмерном пространстве. Несмотря на то что вы, возможно,
# не рассматриваете свои данные как векторы, часто ими удобно
# представлять последовательности чисел.

# Например, если у вас есть данные о росте, массе и возрасте
# большого числа людей, то эти данные можно трактовать как
# трехмерные векторы [рост, масса, возраст]. Если вы готовите
# группу учащихся к четырем экзаменам, то оценки студентов
# можно трактовать как четырехмерные векторы [экзамен1, экзамен2,
# экзамен3, экзамен4].

# Если подходить с нуля, то в простейшем случае векторы реализуются
# в виде списков чисел. Список из трех чисел соответствует вектору
# в трехмерном пространстве, и наоборот:

from typing import List

Vector = List[float]

height_weight_age = [175,     # Сантиметры
                     68,      # Килограммы
                     40]      # Годы

grades = [95,     # Экзамен1
          85,     # Экзамен2
          75,     # Экзамен3
          62]     # Экзамен4

# Мы также захотим выполнять арифметические операции на векторах.
# Поскольку списки в Python не являются векторами (и, следовательно,
# не располагают средствами векторной арифметики), нам придется
# построить эти арифметические иструменты самим. Поэтому начнем с них.

# Нередко приходится складывать два вектора. Векторы складывают
# покомпонентно, т.е. если два вектора v и w имеют одинаковую длину,
# то их сумма - это вектор, чей первый элемент равен v[0] + w[0],
# второй - v[1] + w[1] и т.д. (Если длины векторов разные, то операция
# сложения не разрешена.)

# Например, сложение векторов [1, 2] и [2, 1] даст [1 + 2, 2 + 1]
# или [3, 3].

# Это легко можно имплементировать объединением двух векторов 
# постредством функции zip и сложением соответствующих элементов
# с посощью операции включения в список:
def add(v: Vector, w: Vector) -> Vector:
    """Складываем соответствующие элементы"""
    assert len(v) == len(w), "векторы должны иметь одинаковую длину"

    return [v_i + w_i for v_i, w_i in zip(v, w)]

assert add([1, 2, 3], [4, 5, 6]) == [5, 7, 9]

# Схожим образом для получения разности двух векторов мы вычитаем
# соответствующие элементы:
def subtract(v: Vector, w: Vector) -> Vector:
    """Вычитает соответствующие элементы"""
    assert len(v) == len(w), "векторы должны иметь одинаковую длину"

    return [v_1 - w_1 for v_1, w_1 in zip(v, w)]

assert subtract(v=[5, 7, 9], w=[4, 5, 6]) == [1, 2, 3], "векторы должны иметь одинаковую длину"

# Нам также иногда может понадобиться покомпонентная сумма списка векторов,
# т.е. нужно создать новый вектор, чей первый элемент равен сумме всех первых
# элементов, второй элемент - сумме всех вторых элементов и т.д.:
def vector_sum(vectors: List[Vector]) -> Vector:
    """Суммирует все соответствующие элементы"""
    # Проверить, что векторы не пустые
    assert vectors, "векторы не предоставлены!"

    # Проверить, что векторы имеют одинаковый размер
    num_elements = len(vectors[0])
    assert all(len(v) == num_elements for v in vectors), "разные размеры"

    # i-й элемент результат является суммой каждого элемента vector[i]
    return [sum(vector[i] for vector in vectors)
            for i in range(num_elements)]

assert vector_sum([[1, 2], [3, 4], [5, 6], [7, 8]]) == [16, 20], "векторы должны иметь одинаковую длину"

# Нам еще понадобится умножение вектора на скаляр, которое реализуется простым
# уможением каждого элемента вектора на это число:
def scalar_multiply(c: float, v: Vector) -> Vector:
    """Умножает каждый элемент на с"""
    return [c * v_i for v_i in v]

assert scalar_multiply(2, [1, 2, 3]) == [2, 4, 6]

# Эта функция позволяет нам вычислять покомпонентные средние значения списка
# векторов (одинакового размера):
def vector_mean(vectors: List[Vector]) -> Vector:
    """Вычисляем поэлементное среднее арифметическое"""
    n = len(vectors)
    return scalar_multiply(1/n, vector_sum(vectors))

assert vector_mean([[1, 2], [3, 4], [5, 6]]) == [3, 4]

# Менее очевидный инструмент - это точечное, или скалярное произведение
# (т.е. производящее скалярный результат). Скалярное произведение двух
# векторов есть сумма их покомпонентных произведений:
def dot(v: Vector, w: Vector) -> float:
    """Вычислить v_1 * w_1 + ... + v_n * w_n"""
    assert len(v) == len(w), "Векторы должны иметь одинаковую длину"

    return sum(v_i * w_i for v_i, w_i in zip(v, w))

assert dot([1, 2, 3], [4, 5, 6]) == 32     # 1 * 4 + 2 * 5 + 3 * 6

# Используя эту операцию, легко вычислить сумму квадратов вектора:
def sum_of_squares(v: Vector) -> float:
    """Возвращаем v_1 * v_1 + ... + v_n * v_n"""
    return dot(v, v)

assert sum_of_squares([1, 2, 3]) == 14     # 1 * 1 + 2 * 2 + 3 * 3

# которую можно применить для вычисления его магнитуды (или длины):
import math

def magnitude(v: Vector) -> float:
    """Возвращает магнитуду (или длину) вектора v"""
    # math.sqrt - это функция квадратного корня
    return math.sqrt(sum_of_squares(v))

# Теперь у нас есть все части, необходимые для вычисления (евклидового)
# расстояния между двумя векторами по формуле:

# В исходном коде оно выглядит так:

# Квадрат расстояния между двумя векторами:
def squared_distance(v: Vector, w: Vector) -> float:
    """Вычисляет (v_1 - w_1) ** 2 + ... + (v_n - w_n) ** 2"""
    return sum_of_squares(subtract(v, w))

# Расстояние между двумя векторами:
def distance(v: Vector, w: Vector) -> float:
    """Вычисляем расстояние между v и w"""
    return math.sqrt(squared_distance(v, w))

# Вероятнее, будет понятнее, если мы запишем эту функцию как (эквивалент):
def distance(v: Vector, w: Vector) -> float:
    return magnitude(subtract(v, w))

# Использование списков как векторов великолепно подходит в качестве
# иллюстрации, но является крайне неэффективным по производительности.

# В рабочем коде следует пользоваться библиотекой NumPy, в которой
# есть класс, реализующий высокоэффективный массив с разнообразными
# арифметическими операциями.
